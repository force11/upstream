<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN"
                  "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
</journal-title-group>
<issn></issn>
<publisher>
<publisher-name></publisher-name>
</publisher>
</journal-meta>
<article-meta>
<title-group>
<article-title>Don't Reinvent the Wheel</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Martin Fenner</string-name>
</contrib>
</contrib-group>
<pub-date pub-type="epub" iso-8601-date="2014-07-24">
<day>24</day>
<month>7</month>
<year>2014</year>
</pub-date>
</article-meta>
</front>
<body>
<p>In a
<ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2014/07/18/roads-not-stagecoaches/">post
last week</ext-link> I talked about roads and stagecoaches, and how work
on scholarly infrastructure can often be more important than building
customer-facing apps. One important aspect of that infrastructure work
is to not duplicate efforts.</p>
<fig>
  <caption><p>Image by Cocoabiscuit
  <ext-link ext-link-type="uri" xlink:href="https://www.flickr.com/photos/jfgallery/5673321593/">on
  Flickr</ext-link></p></caption>
  <graphic mimetype="image" mime-subtype="jpeg" xlink:href="https://martinfenner.ghost.io/content/images/2021/02/5673321593_e6a7faa36d_w.jpg" xlink:title="" />
</fig>
<p>A good example is information (or metadata) about scholarly
publications. I am the technical lead for the open source
<ext-link ext-link-type="uri" xlink:href="http://articlemetrics.github.io/">article-level
metrics (ALM) software</ext-link>. This software can be used in
different ways, but most people use it for tracking the metrics of
scholarly articles, with articles that have DOIs issued by CrossRef. The
ALM software needs three pieces of information for every article:
<bold><bold>DOI</bold></bold>, <bold><bold>publication
date</bold></bold>, and <bold><bold>title</bold></bold>. This
information can be entered via a web interface, but that is of course
not very practical for adding dozens or hundreds of articles at a time.
The ALM software has therefore long supported the import of multiple
articles via a text file and the command line.</p>
<p>This approach is working fine for the ALM software
<ext-link ext-link-type="uri" xlink:href="http://articlemetrics.github.io/plos/">running
at PLOS since 2009</ext-link>, but is for example a problem if the ALM
software runs as a service for multiple publishers. A more flexible
approach is to provide an API to upload articles, and I’ve
<ext-link ext-link-type="uri" xlink:href="http://articlemetrics.github.io/docs/api/">added
an API</ext-link> for creating, updating and deleting articles in
January 2014.</p>
<p>While the API is an improvement, it still requires the integration
into a number of possibly very different publisher workflows, and you
have to deal with setting up the permissions, e.g. so that publisher A
can’t delete an article from publisher B.</p>
<p>The next ALM release (3.3) will therefore add a third approach to
importing articles: using the
<ext-link ext-link-type="uri" xlink:href="http://api.crossref.org/">CrossRef
API</ext-link> to look up article information. Article-level metrics is
about tracking already published works, so we really only care about
articles that have DOIs registered with CrossRef and are therefore
published. ALM is now talking to a single API, and this makes it much
easier to do this for a number of publishers without writing custom
code. Since ALM is an open source application already used by several
publishers that aspect is important. And because we are importing, we
have don’t have to worry about permissions. The only requirement is that
CrossRef has the correct article information, and has this information
as soon as possible after publication.</p>
<p>At this point I have a confession to make: I regularly use other
CrossRef APIs, but wasn’t aware of
<bold><bold>api.crossref.org</bold></bold> until fairly recently. That
is sort of understandable since the reference platform was deployed only
September last year. The documentation to get you started is on
<ext-link ext-link-type="uri" xlink:href="https://github.com/CrossRef/rest-api-doc/blob/master/rest_api.md">Github</ext-link>
and the version history shows frequent API updates (now at v22). The API
will return all kinds of information, e.g.</p>
<list list-type="bullet">
  <list-item>
    <p>how many articles has publisher x published in 2012</p>
  </list-item>
  <list-item>
    <p>percentage of DOIs of publisher Y that include at least one ORCID
    identifier</p>
  </list-item>
  <list-item>
    <p>list all books with a Creative Commons CC-BY license that were
    published this year</p>
  </list-item>
</list>
<p>Funder (via FundRef) information is also included, but is still
incomplete. Another interesting result is the number of
<ext-link ext-link-type="uri" xlink:href="http://blogs.plos.org/mfenner/2011/03/26/direct-links-to-figures-and-tables-using-component-dois/">component
DOIs</ext-link> (DOIs for figures, tables or other parts of a document)
per year:</p>
<boxed-text>
  <boxed-text id="header">
    <sec id="crossref-component-dois-by-year">
      <title>CrossRef component DOIs by year</title>
    </sec>
  </boxed-text>
  <boxed-text id="chart">
  </boxed-text>
  <boxed-text id="footer">
    <boxed-text>
      <p>Created with
      <ext-link ext-link-type="uri" xlink:href="https://datawrapper.de/">Datawrapper</ext-link></p>
    </boxed-text>
    <boxed-text>
      <boxed-text>
        <p><milestone-start />Source:
        <ext-link ext-link-type="uri" xlink:href="http://api.crossref.org/works?filter=from-pub-date:2009-01,until-pub-date:2013-12,type:component&amp;rows=0&amp;offset=0">CrossRef</ext-link><milestone-end />
        <ext-link ext-link-type="uri" xlink:href="data">Get the
        data</ext-link></p>
      </boxed-text>
      <p>About</p>
    </boxed-text>
    <boxed-text>
    </boxed-text>
  </boxed-text>
</boxed-text>
<p>For my specific use case I wanted an API call that returns all
articles published by PLOS (or any other publisher) in the last day
which I can then run regularly. To get all DOIs from a specific
publisher, use their CrossRef member ID - DOI prefixes don’t work, as
publishers can own more than one DOI prefix. To make this task a little
easier I built a CrossRef member search interface into the ALM
application:</p>
<fig>
  <graphic mimetype="image" mime-subtype="png" xlink:href="https://martinfenner.ghost.io/content/images/2021/02/crossref_api.png" xlink:title="" />
</fig>
<p>We can filter API responses by publication date, but it is a better
idea to use the update date, as it is possible that the metadata have
changed, e.g. a correction of the title. We also want to increase the
number of results per page (using the <monospace>rows</monospace>
parameter). The final API call for all DOIs updated by PLOS since the
beginning of the week would be</p>
<preformat>http://api.crossref.org/members/340/works?filter=from-update-date:2014-07-21,until-update-date:2014-07-24&amp;rows=1000</preformat>
<p>The next step is of course to parse the JSON of the API response, and
you will notice that CrossRef is using
<ext-link ext-link-type="uri" xlink:href="http://gsl-nagoya-u.net/http/pub/citeproc-doc.html">Citeproc
JSON</ext-link>. This is a standard JSON format for bibliographic
information used internally by several reference managers for citation
styles, but increasingly also by APIs and other places where you
encounter bibliographic information.</p>
<p>Citeproc JSON is helpful for one particular problem with CrossRef
metadata: the exact publication date for an article is not always known,
and CrossRef (and similarly DataCite) only requires the publication
year. Citeproc JSON can nicely handle partial dates, e.g.
year-month:</p>
<preformat>issued: {
  date-parts: [
    [
      2014,
      7
    ]
  ]
},</preformat>
<p>I think that a similar approach will work for many other systems that
require bibliographic information about scholarly content with CrossRef
DOIs. If are not already using
<bold><bold>api.crossref.org</bold></bold>, consider integrating with
it, I find the API fast, well documented, easy to use - and CrossRef is
very responsive to feedback. As you can always wish for more, I would
like to see the following: fix the problem were some journal articles
are missing the publication date (a required field, even if only the
year), and consider adding the canonical URL to the article metadata
(which ALM currently has to look up itself, and which is needed to track
social media coverage of an article).</p>
<p><italic>Update July 24, 2014: added chart with number of component
DOIs per year</italic></p>
</body>
<back>
</back>
</article>
