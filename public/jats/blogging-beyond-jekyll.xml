<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN"
                  "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
</journal-title-group>
<issn></issn>
<publisher>
<publisher-name></publisher-name>
</publisher>
</journal-meta>
<article-meta>
<title-group>
<article-title>Blogging Beyond Jekyll</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Martin Fenner</string-name>
</contrib>
</contrib-group>
<pub-date pub-type="epub" iso-8601-date="2015-03-23">
<day>23</day>
<month>3</month>
<year>2015</year>
</pub-date>
</article-meta>
</front>
<body>
<p>This blog has been on four different platforms since starting in
2007: a custom blogging engine and then
<ext-link ext-link-type="uri" xlink:href="https://movabletype.org/">Movable
Type</ext-link> on
<ext-link ext-link-type="uri" xlink:href="http://network.nature.com/">Nature
Network</ext-link> 2007-2010, Wordpress on the
<ext-link ext-link-type="uri" xlink:href="http://blogs.plos.org/mfenner/">PLOS
Blogs Network</ext-link> 2010-2013, and the static blogging engine
<ext-link ext-link-type="uri" xlink:href="http://jekyllrb.com/">Jekyll</ext-link>
hosted on Github Pages since 2013. It might be time for yet another
blogging platform change.</p>
<p>The main reason to switch from Wordpress to Jekyll was the concept of
a static site generator: write posts in
<ext-link ext-link-type="uri" xlink:href="http://commonmark.org/">markdown
format</ext-link>, store them in a Github repository, and then have
Jekyll automatically generate the HTML pages hosted on
<ext-link ext-link-type="uri" xlink:href="https://pages.github.com/">Github
Pages</ext-link>. The main attraction was the blog posts in markdown
format stored in git version control without the need of a database.
Jekyll is the glue to make all this work, and I was able to customize
Jekyll to my needs, e.g. by using
<ext-link ext-link-type="uri" xlink:href="http://johnmacfarlane.net/pandoc/">Pandoc</ext-link>
for the markdown to html conversion.</p>
<p>While this workflow still makes sense for this blog, there are a
number of shortcomings:</p>
<list list-type="bullet">
  <list-item>
    <p>Jekyll needs to rebuild the entire site every time I publish a
    new post. While this isn’t much of a problem for the size of this
    blog, it doesn’t scale well for larger sites. And the process is
    more complex if you use custom jekyll plugins like this blog, as you
    can’t use the automatic Jekyll pipeline provided by Github (hint:
    use a Travis continous integration server
    <ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2014/03/10/continuous-publishing/">to
    build the site</ext-link>)</p>
  </list-item>
  <list-item>
    <p>the web is moving to increasingly sophisticated javascript
    frontends, using frameworks such as
    <ext-link ext-link-type="uri" xlink:href="https://angularjs.org/">Angular.js</ext-link>,
    <ext-link ext-link-type="uri" xlink:href="http://emberjs.com/">Ember.js</ext-link>,
    or frontend libraries for scholarly documents such as
    <ext-link ext-link-type="uri" xlink:href="http://elifesciences.org/elife-news/lens">Lens</ext-link>.
    While they can be used together with Jekyll, that is not a typical
    use case.</p>
  </list-item>
  <list-item>
    <p>the tight integration between the code to generate the website
    and the content (Wordpress and other blogging engines have the same
    approach) is not always the best solution, e.g. when you want to
    want to generate the pages for something that is not a blog (e.g. a
    <ext-link ext-link-type="uri" xlink:href="http://book.openingscience.org/">book</ext-link>).</p>
  </list-item>
</list>
<p>What could we do instead?</p>
<p specific-use="wrapper">
  <disp-quote>
    <p>Build a Javascript frontend where the content is served via an
    API built around markdown documents, stored in git version
    control.</p>
  </disp-quote>
</p>
<sec id="api">
  <title>API</title>
  <p>The blog posts are still written in markdown, stored (and
  version-controlled in a Github repository), but we would now access
  the content via API. The easiest solution is to use the
  <ext-link ext-link-type="uri" xlink:href="https://developer.github.com/v3/repos/contents/">Github
  Contents API</ext-link> and either do the markdown to html conversion
  in javascript yourself, or let the Github API do the conversion to
  HTML for you. Alternatively we could build our own API, e.g. because
  we want to control the markdown to html conversion, or need additional
  functionality such as fulltext search. And of course the two
  approaches can be combined, e.g. via a Github webhook that triggers
  the markdown to html coversion every time a document is added or
  updated, and stores the converted documents in the same repo.</p>
</sec>
<sec id="frontend">
  <title>Frontend</title>
  <p>The frontend should be written as a one-page javascript
  application, not requiring a server backend. In contrast to the Jekyll
  workflow the frontend code doesn’t need to be updated every time we
  post a blog post. Since this is a very common scenario, there are
  probably several solutions out there already. Please mention them in
  the comments if you have suggestions. One candidate is
  <ext-link ext-link-type="uri" xlink:href="https://github.com/elifesciences/lens/">Lens</ext-link>
  mentioned above - a beautiful frontend for scholarly documents. Lens
  displays documents in the
  <ext-link ext-link-type="uri" xlink:href="http://jats.nlm.nih.gov/publishing/tag-library/1.0/index.html">JATS</ext-link>
  XML format, so your API would have to provide that format.</p>
</sec>
<sec id="conclusions">
  <title>Conclusions</title>
  <p>The separation into API and frontend is of course old news. But for
  blogs this seems to still be a fairly new concept, in particular when
  combined with a backend using documents stored in git version control
  rather than in a database. Wordpress added a
  <ext-link ext-link-type="uri" xlink:href="https://wordpress.org/plugins/json-rest-api/">REST
  API Plugin</ext-link> in 2014, and the Ghost blogging framework (which
  uses a database backend) also seems to
  <ext-link ext-link-type="uri" xlink:href="https://trello.com/b/EceUgtCL/ghost-roadmap">go
  into that general direction</ext-link>. Please ping me if you like the
  idea and want to contribute, or have implemented something like this
  already.</p>
</sec>
</body>
<back>
</back>
</article>
