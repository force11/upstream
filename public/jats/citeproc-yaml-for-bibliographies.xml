<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN"
                  "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
</journal-title-group>
<issn></issn>
<publisher>
<publisher-name></publisher-name>
</publisher>
</journal-meta>
<article-meta>
<title-group>
<article-title>Citeproc YAML for bibliographies</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Martin Fenner</string-name>
</contrib>
</contrib-group>
<pub-date pub-type="epub" iso-8601-date="2013-07-30">
<day>30</day>
<month>7</month>
<year>2013</year>
</pub-date>
</article-meta>
</front>
<body>
<p>The standard local file formats for bibliographic data are probably
bibtex and RIS. They have been around for a long time, and are supported
by all reference managers and many other tools and services.
Unfortunately these formats are far from perfect:</p>
<list list-type="bullet">
  <list-item>
    <p>neither bibtex nor RIS use a web-friendly data interchange format
    such as XML or JSON, which makes it harder to work with these
    formats</p>
  </list-item>
  <list-item>
    <p>bibtex - and to a lesser extend RIS - donâ€™t support all entry
    types that we need, e.g. datasets, or new standards such as ORCID
    author identifiers</p>
  </list-item>
  <list-item>
    <p>bibtex stores all authors in a single field, which makes author
    names hard to parse</p>
  </list-item>
</list>
<sec id="bibtex">
  <title>bibtex</title>
  <preformat>@article{fenner2012a,
  title = {One-click science marketing},
  volume = {11},
  url = {http://dx.doi.org/10.1038/nmat3283},
  doi = {10.1038/nmat3283},
  number = {4},
  journal = {Nature Materials},
  publisher = {Nature Publishing Group},
  author = {Fenner, Martin},
  year = {2012},
  month = {mar},
  pages = {261-263}
}</preformat>
  <p>One obvious solution would be to store bibliographic data in XML or
  JSON. These formats have very good support in all programming
  languages, and they are the formats used by APIs on the web. There
  have been some efforts to standardize these formats for bibliographic
  data, e.g.
  <ext-link ext-link-type="uri" xlink:href="http://www.bibjson.org/">BibJSON</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="http://www.loc.gov/standards/mods/">MODS</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="http://bibtexml.sourceforge.net/">BibTeX
  XML</ext-link> or Endnote XML.</p>
</sec>
<sec id="bibtex-xml">
  <title>BibTeX XML</title>
  <preformat>&lt;bibtex:entry id='fenner2012a'&gt;
  &lt;bibtex:article&gt;
    &lt;bibtex:title&gt;One-click science marketing&lt;/bibtex:title&gt;
    &lt;bibtex:volume&gt;11&lt;/bibtex:volume&gt;
    &lt;bibtex:url&gt;http://dx.doi.org/10.1038/nmat3283&lt;/bibtex:url&gt;
    &lt;bibtex:doi&gt;10.1038/nmat3283&lt;/bibtex:doi&gt;
    &lt;bibtex:number&gt;4&lt;/bibtex:number&gt;
    &lt;bibtex:journal&gt;Nature Materials&lt;/bibtex:journal&gt;
    &lt;bibtex:publisher&gt;Nature Publishing Group&lt;/bibtex:publisher&gt;
    &lt;bibtex:person&gt;
      &lt;bibtex:first&gt;Martin&lt;/bibtex:first&gt;
      &lt;bibtex:last&gt;Fenner&lt;/bibtex:last&gt;
    &lt;bibtex:person&gt;&lt;bibtex:author/&gt;
    &lt;bibtex:year&gt;2012&lt;/bibtex:year&gt;
    &lt;bibtex:month&gt;mar&lt;/bibtex:month&gt;
    &lt;bibtex:pages&gt;261-263&lt;/bibtex:pages&gt;
  &lt;/bibtex:article&gt;
&lt;/bibtex:entry&gt;</preformat>
  <p>My problem with these formats is that they are made for computers
  talking to each other and not humans. I personally think that a file
  with bibliographic data should be human-readable, similar to why
  <ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2012/12/13/a-call-for-scholarly-markdown/">I
  like markdown</ext-link> for writing scientific documents.</p>
  <p>When you have too many standards and are not happy with any of
  them, you of course create a new standard.</p>
  <fig>
    <caption><p><bold>How Standards Proliferate</bold>. Taken from
    <ext-link ext-link-type="uri" xlink:href="http://xkcd.com/927/">http://xkcd.com/927/</ext-link></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="http://imgs.xkcd.com/comics/standards.png" xlink:title="" />
  </fig>
  <p>My suggestion for a new bibliographic file format is twofold: a)
  use YAML for data serialization and b) use CSL as data format.
  <ext-link ext-link-type="uri" xlink:href="http://www.yaml.org/spec/1.2/spec.html">YAML</ext-link>
  is a data format popular with Ruby Developers and is described on the
  <ext-link ext-link-type="uri" xlink:href="http://yaml.org/">YAML
  website</ext-link> as</p>
  <p specific-use="wrapper">
    <disp-quote>
      <p>YAML is a human friendly data serialization standard for all
      programming languages.</p>
    </disp-quote>
  </p>
  <p>Something that not may people seem to know is that YAML is a
  superset of JSON and that
  <ext-link ext-link-type="uri" xlink:href="http://yaml.org/spec/1.2/spec.html#id2759572">every
  JSON file is also a valid YAML file</ext-link>. The main difference is
  the better human readability of YAML.</p>
  <p><bold><bold>Citation Style Language</bold></bold> is described on
  the
  <ext-link ext-link-type="uri" xlink:href="http://citationstyles.org/">CSL
  website</ext-link> as</p>
  <p specific-use="wrapper">
    <disp-quote>
      <p>CSL is an open XML-based language to describe the formatting of
      citations and bibliographies.</p>
    </disp-quote>
  </p>
  <p>Although some commercial applications still use proprietary
  citation styles, CSL has become the de facto standard, and is used by
  the reference managers <bold><bold>Zotero</bold></bold>,
  <bold><bold>Mendeley</bold></bold>, <bold><bold>Papers</bold></bold>,
  and others. This blog uses CSL via Pandoc and the
  <ext-link ext-link-type="uri" xlink:href="http://code.google.com/p/citeproc-hs/">citeproc-hs</ext-link>
  library. CSL processors need bibliographic data in a standard format.
  The popular
  <ext-link ext-link-type="uri" xlink:href="https://bitbucket.org/fbennett/citeproc-js/wiki/Home">Citeproc-js</ext-link>
  Javascript CSL processor by Frank Bennett for example uses JSON, but
  we might as well use YAML:</p>
</sec>
<sec id="citeproc-yaml">
  <title>Citeproc YAML</title>
  <preformat>- title: One-click science marketing
  volume: '11'
  URL: http://dx.doi.org/10.1038/nmat3283
  DOI: 10.1038/nmat3283
  issue: '4'
  container-title: Nature Materials
  publisher: Nature Publishing Group
  author:
  - family: Fenner
    given: Martin
    orcid: 0000-0003-1419-2405
  page: 261-263
  id: fenner2012a
  type: article-journal
  issued:
    date-parts:
      - 2012
      - 3</preformat>
  <p>I hope you agree that this format is not only structured and can be
  understood by computers, but is also very readable by humans. You may
  have noticed that I have inserted my ORCID, something that is very
  difficult to do with bibtex where all authors are stored in one text
  string (see above).</p>
  <p>Careful readers of this blog will of course remember that
  <ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2013/06/29/metadata-in-scholarly-markdown/">I
  have written about</ext-link> using YAML to store metadata about a
  blog post. We could now add bibliographic information to these
  metadata, either in the YAML frontmatter (if it is a Jekyll blog), or
  in a separate file. It should be straightforward to adapt the existing
  CSL processors to understand YAML since YAML and JSON are so similar.
  To get started with some Citeproc YAML, use the new (and still
  experimental) <bold><bold>ORCID Feed</bold></bold> Webservice with
  your ORCID and specify the <monospace>yml</monospace> format, e.g.
  <ext-link ext-link-type="uri" xlink:href="http://feed.labs.orcid-eu.org/0000-0003-1419-2405.yml">http://feed.labs.orcid-eu.org/0000-0003-1419-2405.yml</ext-link>
  for my publications.</p>
</sec>
</body>
<back>
</back>
</article>
