<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN"
                  "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
</journal-title-group>
<issn></issn>
<publisher>
<publisher-name></publisher-name>
</publisher>
</journal-meta>
<article-meta>
<title-group>
<article-title>Introducing Rakali</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Martin Fenner</string-name>
</contrib>
</contrib-group>
<pub-date pub-type="epub" iso-8601-date="2014-08-18">
<day>18</day>
<month>8</month>
<year>2014</year>
</pub-date>
</article-meta>
</front>
<body>
<p>In July and August I attended the
<ext-link ext-link-type="uri" xlink:href="http://2014.okfestival.org/">Open
Knowledge Festival</ext-link> and
<ext-link ext-link-type="uri" xlink:href="http://wikimania2014.wikimedia.org/wiki/Programme">Wikimania</ext-link>.
At both events I had many interesting discussions around open source
tools for open access scholarly publishing, and I was part of a
<ext-link ext-link-type="uri" xlink:href="http://wikimania2014.wikimedia.org/wiki/Submissions/The_Full_OA_Stack_-_Open_Access_and_Open_Source">panel</ext-link>
on that topic at Wikimania last Sunday. Some of my thoughts were
summarized in a blog post a few weeks ago
(<ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2014/07/18/roads-not-stagecoaches/">Build
Roads not Stagecoaches</ext-link>). Today I am happy to announce the
first public release of a tool that hopefully contributes to making
publishing of open content a bit easier.</p>
<fig>
  <caption><p>LEGO Researchers are excited that they don’t have to use
  Microsoft Word for manuscript writing anymore.</p></caption>
  <graphic mimetype="image" mime-subtype="jpeg" xlink:href="http://blog.martinfenner.org/images/rakali.jpg" xlink:title="" />
</fig>
<p><ext-link ext-link-type="uri" xlink:href="https://github.com/rakali/rakali.rb">Rakali</ext-link>
is a Ruby gem that acts as a wrapper for the
<ext-link ext-link-type="uri" xlink:href="http://johnmacfarlane.net/pandoc/">Pandoc</ext-link>
universal document converter. Pandoc is a wonderful tool to convert
documents between file formats and supports many file formats and
features important for scholarly publishing. Pandoc 1.13 was
<ext-link ext-link-type="uri" xlink:href="http://johnmacfarlane.net/pandoc/releases.html">released</ext-link>
last Friday, and one of the most exciting new features is a reader for
Microsoft Word (<monospace>docx</monospace>) documents. Pandoc has
supported the conversion to <monospace>docx</monospace> for a while, but
now you can use the most popular file format for writing scholarly
documents and turn your <monospace>docx</monospace> files into HTML,
PDF, LateX, markdown, or a number of other formats, making it much
easier to collaborate, and to use <monospace>docx</monospace> with
Pandoc in scholarly publishing workflows. A good example would be arXiv,
which
<ext-link ext-link-type="uri" xlink:href="http://arxiv.org/help/submit#text">doesn’t
support</ext-link> <monospace>docx</monospace> for text submissions.
Instead of turning it into PDF the manuscript can now be converted to
LaTeX - the preferred file format at arXiv - before submission.</p>
<p>I built <bold><bold>Rakali</bold></bold> to make it easier to use
Pandoc to convert large numbers of documents in an automated way:</p>
<list list-type="bullet">
  <list-item>
    <p>bulk conversion of all files in a folder with a specific
    extension, e.g. <monospace>md</monospace>.</p>
  </list-item>
  <list-item>
    <p>input via a configuration file in yaml format instead of via the
    command line</p>
  </list-item>
  <list-item>
    <p>validation of documents via
    <ext-link ext-link-type="uri" xlink:href="http://json-schema.org/">JSON
    Schema</ext-link>, using the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/hoxworth/json-schema">json-schema</ext-link>
    Ruby gem.</p>
  </list-item>
  <list-item>
    <p>Logging via <monospace>stdout</monospace> and
    <monospace>stderr</monospace>.</p>
  </list-item>
</list>
<p>One interesting way to use Rakali and Pandoc is as part of a
<ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2014/03/10/continuous-publishing/">continuous
publishing</ext-link> workflow that involves git and Github,
automatically converting all files in a folder when something is pushed
to the repository using a continuous integration tool, and exiting the
continuous integration run when one of the files doesn’t validate. Look
into the Rakali
<ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2014/08/18/introducing-rakali/%5BRakali%5D(https://github.com/rakali/rakali.rb)">repo</ext-link>
for an example.</p>
<p>The most interesting aspect of Rakali is probably validation via JSON
Schema. File conversion with Pandoc is a two-step process, the
intermediate format is an internal representation of the document in
something called the
<ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2013/11/17/the-grammar-of-scholarly-communication/">abstract
syntax tree</ext-link> or AST. Pandoc makes the AST accessible in JSON
format, making it straightforward to manipulate a document before the
conversion into the target format with something called
<ext-link ext-link-type="uri" xlink:href="http://johnmacfarlane.net/pandoc/scripting.html">JSON
filters</ext-link>.</p>
<p>Validation of XML documents using
<ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Document_type_definition">DTDs</ext-link>,
<ext-link ext-link-type="uri" xlink:href="http://relaxng.org/">RELAX
NG</ext-link> and other standards has of course been around for a long
time, but validation of JSON documents is still relatively new. Since
many Pandoc document conversion workflows don’t involve any XML I
thought it would make more sense to validate against the AST, and we can
use JSON Schema for that. I have started a
<ext-link ext-link-type="uri" xlink:href="https://github.com/rakali/pandoc-schemata">Github
repository</ext-link> with schemata for the Pandoc AST, and hope to
evolve them over time using Rakali as a tool. An example log output
(from the Rakali test suite, stopping file conversion because title and
layout metadata are missing) looks like this:</p>
<preformat>Validation Error: The property '#/0/unMeta' did not contain a required property of 'title' in schema 9b6d454d-e609-537b-b761-9599b6c01072# for file empty.md
Validation Error: The property '#/0/unMeta' did not contain a required property of 'layout' in schema 9b6d454d-e609-537b-b761-9599b6c01072# for file empty.md
Fatal: Conversion of file empty.md failed.</preformat>
<p>As I had argued before, the challenge for building open source tools
for science is to
<ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2014/07/24/dont-reinvent-the-wheel/">not
duplicate the work of others</ext-link>, and to integrate well with
existing tools by focussing on one aspect and doing that aspect well. It
also helps to think about infrastructure
(<ext-link ext-link-type="uri" xlink:href="http://blog.martinfenner.org/2014/07/18/roads-not-stagecoaches/">the
roads</ext-link>) instead of only focussing on the user-facing aspects.
There are obviously many document conversion tools out there, but Pandoc
is certainly one of the oldest and most established ones for scholarly
content. Rakali therefore builds on top of Pandoc and tries to play well
with other existing tools and services, e.g. by using the UNIX
<monospace>stdout</monospace> and <monospace>stderr</monospace> for
reporting, and by using a file-based approach that works well with
version control systems such as git. And since Rakali is a Ruby gem it
can not only be used as a standalone command line tool, but can also be
easily integrated into other Ruby applications.</p>
</body>
<back>
</back>
</article>
